/*
  # Fix Stripe Tables Primary Keys

  This migration fixes the Stripe tables to have proper primary keys, enabling row deletion in Supabase dashboard.

  ## Changes Made
  1. Recreate stripe_customers table with SERIAL PRIMARY KEY
  2. Recreate stripe_orders table with SERIAL PRIMARY KEY  
  3. Recreate stripe_subscriptions table with SERIAL PRIMARY KEY
  4. Preserve all existing data during recreation
  5. Restore RLS policies and triggers

  ## Why This Approach
  - PostgreSQL doesn't support SET GENERATED BY DEFAULT AS IDENTITY on existing columns
  - Table recreation is the safest way to add proper primary keys
  - All data is preserved through backup and restore process
*/

-- Backup existing data
CREATE TEMP TABLE stripe_customers_backup AS SELECT * FROM stripe_customers;
CREATE TEMP TABLE stripe_orders_backup AS SELECT * FROM stripe_orders;
CREATE TEMP TABLE stripe_subscriptions_backup AS SELECT * FROM stripe_subscriptions;

-- Drop existing tables
DROP TABLE IF EXISTS stripe_customers CASCADE;
DROP TABLE IF EXISTS stripe_orders CASCADE;
DROP TABLE IF EXISTS stripe_subscriptions CASCADE;

-- Recreate stripe_customers with proper primary key
CREATE TABLE stripe_customers (
  id SERIAL PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES users(id),
  customer_id text NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz
);

-- Recreate stripe_orders with proper primary key
CREATE TABLE stripe_orders (
  id SERIAL PRIMARY KEY,
  checkout_session_id text NOT NULL,
  payment_intent_id text NOT NULL,
  customer_id text NOT NULL,
  amount_subtotal bigint NOT NULL,
  amount_total bigint NOT NULL,
  currency text NOT NULL,
  payment_status text NOT NULL,
  status stripe_order_status DEFAULT 'pending',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz
);

-- Recreate stripe_subscriptions with proper primary key
CREATE TABLE stripe_subscriptions (
  id SERIAL PRIMARY KEY,
  customer_id text NOT NULL UNIQUE,
  subscription_id text,
  price_id text,
  current_period_start bigint,
  current_period_end bigint,
  cancel_at_period_end boolean DEFAULT false,
  payment_method_brand text,
  payment_method_last4 text,
  status stripe_subscription_status DEFAULT 'not_started' NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz,
  last_card_expiring_reminder_sent_at timestamptz
);

-- Create indexes for performance
CREATE INDEX idx_stripe_subscriptions_card_reminder ON stripe_subscriptions 
  (last_card_expiring_reminder_sent_at, status) 
  WHERE status IN ('active', 'trialing');

-- Restore data from backups
INSERT INTO stripe_customers (user_id, customer_id, created_at, updated_at, deleted_at)
SELECT user_id, customer_id, created_at, updated_at, deleted_at 
FROM stripe_customers_backup;

INSERT INTO stripe_orders (checkout_session_id, payment_intent_id, customer_id, amount_subtotal, amount_total, currency, payment_status, status, created_at, updated_at, deleted_at)
SELECT checkout_session_id, payment_intent_id, customer_id, amount_subtotal, amount_total, currency, payment_status, status, created_at, updated_at, deleted_at 
FROM stripe_orders_backup;

INSERT INTO stripe_subscriptions (customer_id, subscription_id, price_id, current_period_start, current_period_end, cancel_at_period_end, payment_method_brand, payment_method_last4, status, created_at, updated_at, deleted_at, last_card_expiring_reminder_sent_at)
SELECT customer_id, subscription_id, price_id, current_period_start, current_period_end, cancel_at_period_end, payment_method_brand, payment_method_last4, status, created_at, updated_at, deleted_at, last_card_expiring_reminder_sent_at 
FROM stripe_subscriptions_backup;

-- Enable RLS on all tables
ALTER TABLE stripe_customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE stripe_orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE stripe_subscriptions ENABLE ROW LEVEL SECURITY;

-- Recreate RLS policies
CREATE POLICY "stripe_customers_postgres_all"
  ON stripe_customers
  FOR ALL
  TO postgres
  USING (true)
  WITH CHECK (true);

CREATE POLICY "stripe_orders_postgres_all"
  ON stripe_orders
  FOR ALL
  TO postgres
  USING (true)
  WITH CHECK (true);

CREATE POLICY "stripe_subscriptions_postgres_all"
  ON stripe_subscriptions
  FOR ALL
  TO postgres
  USING (true)
  WITH CHECK (true);

-- Recreate triggers for updated_at
CREATE TRIGGER update_stripe_customers_updated_at
  BEFORE UPDATE ON stripe_customers
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_stripe_orders_updated_at
  BEFORE UPDATE ON stripe_orders
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_stripe_subscriptions_updated_at
  BEFORE UPDATE ON stripe_subscriptions
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Clean up temp tables
DROP TABLE stripe_customers_backup;
DROP TABLE stripe_orders_backup;
DROP TABLE stripe_subscriptions_backup;