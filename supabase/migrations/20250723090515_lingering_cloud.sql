-- This script was generated by the Supabase CLI.
-- Changes to this file may cause incorrect behavior and will be lost if the script is regenerated.

-- Set up the "public" schema
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Create ENUM types
CREATE TYPE public.inspection_type AS ENUM (
    'check_in',
    'check_out',
    'move_in',
    'move_out'
);
COMMENT ON TYPE public.inspection_type IS 'Inspection types: check_in/check_out for STR, move_in/move_out for real estate';

CREATE TYPE public.stripe_order_status AS ENUM (
    'canceled',
    'completed',
    'pending'
);

CREATE TYPE public.stripe_subscription_status AS ENUM (
    'active',
    'canceled',
    'incomplete',
    'incomplete_expired',
    'not_started',
    'past_due',
    'paused',
    'trialing',
    'unpaid'
);

CREATE TYPE public.team_member_role AS ENUM (
    'admin',
    'member',
    'owner'
);

CREATE TYPE public.template_item_type AS ENUM (
    'divider',
    'multiple_choice',
    'photo',
    'section',
    'single_choice',
    'text'
);
COMMENT ON TYPE public.template_item_type IS 'Type of template item: text, single_choice, multiple_choice, photo, section, or divider';

CREATE TYPE public.inspection_status AS ENUM (
    'canceled',
    'completed',
    'in_progress'
);

-- Create update_updated_at_column function
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$function$;

-- Create handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  INSERT INTO public.profiles (id, email, full_name)
  VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
  
  -- Create admin record for the new user
  INSERT INTO public.admin (owner_id, billing_manager_id, company_name, subscription_tier, subscription_status, trial_started_at, trial_ends_at)
  VALUES (
    NEW.id, 
    NEW.id, 
    NEW.raw_user_meta_data->>'company_name',
    'starter',
    'trialing',
    now(),
    now() + INTERVAL '14 days'
  );

  -- Add the user as an owner in team_members
  INSERT INTO public.team_members (admin_id, profile_id, role)
  VALUES (
    (SELECT id FROM public.admin WHERE owner_id = NEW.id),
    NEW.id,
    'owner'
  );

  RETURN NEW;
END;
$function$;

-- Create handle_email_verification function
CREATE OR REPLACE FUNCTION public.handle_email_verification()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  -- Update the profile to mark email as confirmed
  UPDATE public.profiles
  SET email_confirmed_at = now()
  WHERE id = NEW.id;

  RETURN NEW;
END;
$function$;

-- Create handle_auth_user_changes function
CREATE OR REPLACE FUNCTION public.handle_auth_user_changes()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  -- Update profile email if it changes in auth.users
  IF NEW.email IS DISTINCT FROM OLD.email THEN
    UPDATE public.profiles
    SET email = NEW.email, updated_at = now()
    WHERE id = NEW.id;
  END IF;

  -- Update profile full_name if it changes in auth.users metadata
  IF NEW.raw_user_meta_data->>'full_name' IS DISTINCT FROM OLD.raw_user_meta_data->>'full_name' THEN
    UPDATE public.profiles
    SET full_name = NEW.raw_user_meta_data->>'full_name', updated_at = now()
    WHERE id = NEW.id;
  END IF;

  RETURN NEW;
END;
$function$;

-- Create tables
CREATE TABLE public.templates (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id uuid NOT NULL,
    category_id uuid,
    name text NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.report_service_teams (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id uuid NOT NULL,
    designation text NOT NULL,
    email text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.template_items (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    template_id uuid NOT NULL,
    parent_id uuid,
    type public.template_item_type NOT NULL,
    label text NOT NULL,
    section_name text,
    required boolean DEFAULT false,
    options jsonb,
    report_enabled boolean DEFAULT false,
    maintenance_email text,
    report_recipient_id uuid,
    "order" integer NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.properties (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id uuid NOT NULL,
    name text NOT NULL,
    address text NOT NULL,
    type text NOT NULL,
    bedrooms text NOT NULL,
    bathrooms text NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.template_categories (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id uuid NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.property_checklists (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    property_id uuid NOT NULL,
    name text NOT NULL,
    description text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.property_checklist_templates (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    property_checklist_id uuid NOT NULL,
    template_id uuid NOT NULL,
    order_index integer NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.inspections (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    property_id uuid NOT NULL,
    property_checklist_id uuid,
    inspector_id uuid NOT NULL,
    inspection_type public.inspection_type NOT NULL,
    primary_contact_name text,
    inspector_name text,
    start_time timestamp with time zone DEFAULT now() NOT NULL,
    end_time timestamp with time zone,
    duration_seconds integer,
    primary_contact_signature_url text,
    inspector_signature_image_url text,
    client_present_for_signature boolean DEFAULT false,
    status public.inspection_status DEFAULT 'in_progress'::public.inspection_status NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Add comments for inspections table columns
COMMENT ON COLUMN public.inspections.primary_contact_name IS 'Contact name - Guest name for STR, Client name for real estate';
COMMENT ON COLUMN public.inspections.primary_contact_signature_url IS 'Primary contact signature URL - Guest or client signature';
COMMENT ON COLUMN public.inspections.client_present_for_signature IS 'Whether client is present and signature is required (real estate only)';

CREATE TABLE public.stripe_subscriptions (
    id bigint NOT NULL,
    customer_id text NOT NULL,
    subscription_id text,
    price_id text,
    current_period_start bigint,
    current_period_end bigint,
    cancel_at_period_end boolean DEFAULT false,
    payment_method_brand text,
    payment_method_last4 text,
    status public.stripe_subscription_status DEFAULT 'not_started'::public.stripe_subscription_status NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    deleted_at timestamp with time zone
);

CREATE TABLE public.stripe_orders (
    id bigint NOT NULL,
    checkout_session_id text NOT NULL,
    payment_intent_id text NOT NULL,
    customer_id text NOT NULL,
    amount_subtotal bigint NOT NULL,
    amount_total bigint NOT NULL,
    currency text NOT NULL,
    payment_status text NOT NULL,
    status public.stripe_order_status DEFAULT 'pending'::public.stripe_order_status,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    deleted_at timestamp with time zone
);

CREATE TABLE public.inspection_items (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    inspection_id uuid NOT NULL,
    template_item_id uuid NOT NULL,
    value jsonb,
    notes text,
    photo_urls text[],
    order_index integer NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.stripe_customers (
    id bigint NOT NULL,
    user_id uuid NOT NULL,
    customer_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    deleted_at timestamp with time zone
);

CREATE TABLE public.profiles (
    id uuid PRIMARY KEY NOT NULL,
    email text NOT NULL,
    full_name text,
    avatar_url text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.admin (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    owner_id uuid NOT NULL,
    billing_manager_id uuid,
    customer_id text,
    company_name text NOT NULL,
    logo_url text,
    brand_color text DEFAULT '#2563EB'::text,
    report_background text DEFAULT '#FFFFFF'::text,
    subscription_tier text DEFAULT 'starter'::text,
    subscription_status text DEFAULT 'trialing'::text,
    trial_started_at timestamp with time zone,
    trial_ends_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE public.team_members (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id uuid NOT NULL,
    profile_id uuid NOT NULL,
    role public.team_member_role DEFAULT 'owner'::public.team_member_role,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Create reports table
CREATE TABLE public.reports (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    inspection_id uuid NOT NULL REFERENCES public.inspections(id) ON DELETE CASCADE,
    report_url text NOT NULL,
    report_type text NOT NULL,
    generated_at timestamp with time zone NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Create views
CREATE OR REPLACE VIEW public.user_admin_status AS
 SELECT tm.profile_id,
    tm.admin_id,
    tm.role,
    (tm.profile_id = a.owner_id) AS is_owner,
    a.trial_started_at,
    a.subscription_status,
    a.customer_id,
    ((a.subscription_status = 'trialing'::text AND a.trial_ends_at > now()) OR (a.subscription_status = 'active'::text)) AS has_active_subscription
   FROM public.team_members tm
     JOIN public.admin a ON tm.admin_id = a.id;

CREATE OR REPLACE VIEW public.stripe_user_subscriptions AS
 SELECT sc.customer_id,
    ss.subscription_id,
    ss.status AS subscription_status,
    ss.price_id,
    ss.current_period_start,
    ss.current_period_end,
    ss.cancel_at_period_end,
    ss.payment_method_brand,
    ss.payment_method_last4
   FROM public.stripe_customers sc
     JOIN public.stripe_subscriptions ss ON sc.customer_id = ss.customer_id;

CREATE OR REPLACE VIEW public.stripe_user_orders AS
 SELECT sc.customer_id,
    so.id AS order_id,
    so.checkout_session_id,
    so.payment_intent_id,
    so.amount_subtotal,
    so.amount_total,
    so.currency,
    so.payment_status,
    so.status AS order_status,
    so.created_at AS order_date
   FROM public.stripe_customers sc
     JOIN public.stripe_orders so ON sc.customer_id = so.customer_id;

-- Add indexes
CREATE UNIQUE INDEX admin_customer_id_key ON public.admin USING btree (customer_id);
CREATE UNIQUE INDEX admin_owner_id_key ON public.admin USING btree (owner_id);
CREATE UNIQUE INDEX admin_pkey ON public.admin USING btree (id);
CREATE INDEX idx_admin_owner_id ON public.admin USING btree (owner_id);
CREATE INDEX idx_inspection_items_inspection_id ON public.inspection_items USING btree (inspection_id);
CREATE INDEX idx_inspection_items_order ON public.inspection_items USING btree (order_index);
CREATE INDEX idx_inspection_items_template_item_id ON public.inspection_items USING btree (template_item_id);
CREATE UNIQUE INDEX inspection_items_pkey ON public.inspection_items USING btree (id);
CREATE INDEX idx_inspections_created_at ON public.inspections USING btree (created_at DESC);
CREATE INDEX idx_inspections_inspector_id ON public.inspections USING btree (inspector_id);
CREATE INDEX idx_inspections_property_id ON public.inspections USING btree (property_id);
CREATE INDEX idx_inspections_status ON public.inspections USING btree (status);
CREATE UNIQUE INDEX inspections_pkey ON public.inspections USING btree (id);
CREATE INDEX idx_properties_admin_id ON public.properties USING btree (admin_id);
CREATE INDEX idx_properties_created_at ON public.properties USING btree (created_at DESC);
CREATE INDEX idx_properties_type ON public.properties USING btree (type);
CREATE UNIQUE INDEX properties_pkey ON public.properties USING btree (id);
CREATE INDEX idx_property_checklists_active ON public.property_checklists USING btree (is_active);
CREATE INDEX idx_property_checklists_property_id ON public.property_checklists USING btree (property_id);
CREATE UNIQUE INDEX property_checklists_pkey ON public.property_checklists USING btree (id);
CREATE INDEX idx_property_checklist_templates_checklist_id ON public.property_checklist_templates USING btree (property_checklist_id);
CREATE INDEX idx_property_checklist_templates_order ON public.property_checklist_templates USING btree (order_index);
CREATE UNIQUE INDEX property_checklist_templates_pkey ON public.property_checklist_templates USING btree (id);
CREATE UNIQUE INDEX property_checklist_templates_property_checklist_id_template_key ON public.property_checklist_templates USING btree (property_checklist_id, template_id);
CREATE INDEX idx_report_service_teams_admin_id ON public.report_service_teams USING btree (admin_id);
CREATE UNIQUE INDEX report_service_teams_admin_id_designation_key ON public.report_service_teams USING btree (admin_id, designation);
CREATE UNIQUE INDEX report_service_teams_pkey ON public.report_service_teams USING btree (id);
CREATE UNIQUE INDEX stripe_customers_customer_id_key ON public.stripe_customers USING btree (customer_id);
CREATE UNIQUE INDEX stripe_customers_pkey ON public.stripe_customers USING btree (id);
CREATE UNIQUE INDEX stripe_customers_user_id_key ON public.stripe_customers USING btree (user_id);
CREATE UNIQUE INDEX stripe_orders_checkout_session_id_key ON public.stripe_orders USING btree (checkout_session_id);
CREATE UNIQUE INDEX stripe_orders_pkey ON public.stripe_orders USING btree (id);
CREATE UNIQUE INDEX stripe_subscriptions_customer_id_key ON public.stripe_subscriptions USING btree (customer_id);
CREATE UNIQUE INDEX stripe_subscriptions_pkey ON public.stripe_subscriptions USING btree (id);
CREATE INDEX idx_template_categories_admin_id ON public.template_categories USING btree (admin_id);
CREATE UNIQUE INDEX template_categories_pkey ON public.template_categories USING btree (id);
CREATE INDEX idx_template_items_hierarchy ON public.template_items USING btree (template_id, parent_id, "order");
CREATE INDEX idx_template_items_order ON public.template_items USING btree ("order");
CREATE INDEX idx_template_items_order_fallback ON public.template_items USING btree ("order") WHERE (parent_id IS NULL);
CREATE INDEX idx_template_items_order_scoped ON public.template_items USING btree (template_id, COALESCE(parent_id, '00000000-0000-0000-0000-000000000000'::uuid), "order");
CREATE INDEX idx_template_items_parent_id ON public.template_items USING btree (parent_id);
CREATE INDEX idx_template_items_report_recipient_id ON public.template_items USING btree (report_recipient_id);
CREATE INDEX idx_template_items_template_id ON public.template_items USING btree (template_id);
CREATE INDEX idx_template_items_type ON public.template_items USING btree (type);
CREATE UNIQUE INDEX template_items_pkey ON public.template_items USING btree (id);
CREATE INDEX idx_templates_admin_id ON public.templates USING btree (admin_id);
CREATE INDEX idx_templates_category_id ON public.templates USING btree (category_id);
CREATE UNIQUE INDEX templates_pkey ON public.templates USING btree (id);
CREATE INDEX idx_user_admin_status_admin_id ON public.team_members USING btree (admin_id);
CREATE INDEX idx_user_admin_status_profile_id ON public.team_members USING btree (profile_id);
CREATE UNIQUE INDEX team_members_admin_id_profile_id_key ON public.team_members USING btree (admin_id, profile_id);
CREATE UNIQUE INDEX team_members_pkey ON public.team_members USING btree (id);
CREATE INDEX idx_profiles_id ON public.profiles USING btree (id);
CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);
CREATE INDEX idx_reports_inspection_id ON public.reports USING btree (inspection_id);
CREATE INDEX idx_reports_generated_at ON public.reports USING btree (generated_at DESC);
CREATE UNIQUE INDEX reports_pkey ON public.reports USING btree (id);

-- Add constraints
ALTER TABLE public.properties ADD CONSTRAINT properties_bathrooms_check CHECK ((bathrooms = ANY (ARRAY['1'::text, '2'::text, '3'::text, '4'::text, '5'::text, '6+'::text])));
ALTER TABLE public.properties ADD CONSTRAINT properties_bedrooms_check CHECK ((bedrooms = ANY (ARRAY['studio'::text, '1'::text, '2'::text, '3'::text, '4'::text, '5+'::text])));
ALTER TABLE public.properties ADD CONSTRAINT properties_pkey PRIMARY KEY (id);
ALTER TABLE public.properties ADD CONSTRAINT properties_type_check CHECK ((type = ANY (ARRAY['apartment'::text, 'house'::text, 'villa'::text, 'condo'::text])));
ALTER TABLE public.template_items ADD CONSTRAINT template_items_check CHECK ((id <> parent_id));
ALTER TABLE public.template_items ADD CONSTRAINT template_items_pkey PRIMARY KEY (id);
ALTER TABLE public.property_checklists ADD CONSTRAINT property_checklists_pkey PRIMARY KEY (id);
ALTER TABLE public.property_checklist_templates ADD CONSTRAINT property_checklist_templates_pkey PRIMARY KEY (id);
ALTER TABLE public.property_checklist_templates ADD CONSTRAINT property_checklist_templates_property_checklist_id_template_key UNIQUE (property_checklist_id, template_id);
ALTER TABLE public.inspections ADD CONSTRAINT inspections_pkey PRIMARY KEY (id);
ALTER TABLE public.stripe_subscriptions ADD CONSTRAINT stripe_subscriptions_customer_id_key UNIQUE (customer_id);
ALTER TABLE public.stripe_subscriptions ADD CONSTRAINT stripe_subscriptions_pkey PRIMARY KEY (id);
ALTER TABLE public.stripe_orders ADD CONSTRAINT stripe_orders_checkout_session_id_key UNIQUE (checkout_session_id);
ALTER TABLE public.stripe_orders ADD CONSTRAINT stripe_orders_pkey PRIMARY KEY (id);
ALTER TABLE public.inspection_items ADD CONSTRAINT inspection_items_pkey PRIMARY KEY (id);
ALTER TABLE public.stripe_customers ADD CONSTRAINT stripe_customers_customer_id_key UNIQUE (customer_id);
ALTER TABLE public.stripe_customers ADD CONSTRAINT stripe_customers_pkey PRIMARY KEY (id);
ALTER TABLE public.stripe_customers ADD CONSTRAINT stripe_customers_user_id_key UNIQUE (user_id);
ALTER TABLE public.profiles ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);
ALTER TABLE public.admin ADD CONSTRAINT admin_customer_id_key UNIQUE (customer_id);
ALTER TABLE public.admin ADD CONSTRAINT admin_owner_id_key UNIQUE (owner_id);
ALTER TABLE public.admin ADD CONSTRAINT admin_pkey PRIMARY KEY (id);
ALTER TABLE public.team_members ADD CONSTRAINT team_members_admin_id_profile_id_key UNIQUE (admin_id, profile_id);
ALTER TABLE public.team_members ADD CONSTRAINT team_members_pkey PRIMARY KEY (id);
ALTER TABLE public.report_service_teams ADD CONSTRAINT report_service_teams_admin_id_designation_key UNIQUE (admin_id, designation);
ALTER TABLE public.report_service_teams ADD CONSTRAINT report_service_teams_pkey PRIMARY KEY (id);
ALTER TABLE public.template_categories ADD CONSTRAINT template_categories_pkey PRIMARY KEY (id);
ALTER TABLE public.templates ADD CONSTRAINT templates_pkey PRIMARY KEY (id);
ALTER TABLE public.reports ADD CONSTRAINT reports_pkey PRIMARY KEY (id);

-- Add foreign keys
ALTER TABLE public.templates ADD CONSTRAINT templates_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.admin(id);
ALTER TABLE public.templates ADD CONSTRAINT templates_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.template_categories(id);
ALTER TABLE public.report_service_teams ADD CONSTRAINT report_service_teams_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.admin(id) ON DELETE CASCADE;
ALTER TABLE public.template_items ADD CONSTRAINT template_items_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.template_items(id) ON DELETE CASCADE;
ALTER TABLE public.template_items ADD CONSTRAINT template_items_report_recipient_id_fkey FOREIGN KEY (report_recipient_id) REFERENCES public.report_service_teams(id) ON DELETE SET NULL;
ALTER TABLE public.template_items ADD CONSTRAINT template_items_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.templates(id) ON DELETE CASCADE;
ALTER TABLE public.properties ADD CONSTRAINT properties_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.admin(id) ON DELETE CASCADE;
ALTER TABLE public.template_categories ADD CONSTRAINT template_categories_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.admin(id);
ALTER TABLE public.property_checklists ADD CONSTRAINT property_checklists_property_id_fkey FOREIGN KEY (property_id) REFERENCES public.properties(id) ON DELETE CASCADE;
ALTER TABLE public.property_checklist_templates ADD CONSTRAINT property_checklist_templates_property_checklist_id_fkey FOREIGN KEY (property_checklist_id) REFERENCES public.property_checklists(id) ON DELETE CASCADE;
ALTER TABLE public.property_checklist_templates ADD CONSTRAINT property_checklist_templates_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.templates(id) ON DELETE CASCADE;
ALTER TABLE public.inspections ADD CONSTRAINT inspections_inspector_id_fkey FOREIGN KEY (inspector_id) REFERENCES public.profiles(id) ON DELETE CASCADE;
ALTER TABLE public.inspections ADD CONSTRAINT inspections_property_checklist_id_fkey FOREIGN KEY (property_checklist_id) REFERENCES public.property_checklists(id);
ALTER TABLE public.inspections ADD CONSTRAINT inspections_property_id_fkey FOREIGN KEY (property_id) REFERENCES public.properties(id) ON DELETE CASCADE;
ALTER TABLE public.inspection_items ADD CONSTRAINT inspection_items_inspection_id_fkey FOREIGN KEY (inspection_id) REFERENCES public.inspections(id) ON DELETE CASCADE;
ALTER TABLE public.inspection_items ADD CONSTRAINT inspection_items_template_item_id_fkey FOREIGN KEY (template_item_id) REFERENCES public.template_items(id) ON DELETE CASCADE;
ALTER TABLE public.stripe_customers ADD CONSTRAINT stripe_customers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);
ALTER TABLE public.profiles ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);
ALTER TABLE public.admin ADD CONSTRAINT admin_billing_manager_id_fkey FOREIGN KEY (billing_manager_id) REFERENCES public.profiles(id);
ALTER TABLE public.admin ADD CONSTRAINT admin_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id);
ALTER TABLE public.team_members ADD CONSTRAINT team_members_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.admin(id);
ALTER TABLE public.team_members ADD CONSTRAINT team_members_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id);
ALTER TABLE public.reports ADD CONSTRAINT reports_inspection_id_fkey FOREIGN KEY (inspection_id) REFERENCES public.inspections(id) ON DELETE CASCADE;

-- Add RLS policies
ALTER TABLE public.templates ENABLE ROW LEVEL SECURITY;
CREATE POLICY templates_manage_admins ON public.templates TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = templates.admin_id AND (a.owner_id = auth.uid() OR EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid() AND tm.role = ANY (ARRAY['owner'::public.team_member_role, 'admin'::public.team_member_role])))))));
CREATE POLICY templates_postgres_all ON public.templates TO postgres USING (true) WITH CHECK (true);
CREATE POLICY templates_select_members ON public.templates TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = templates.admin_id AND EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid())))));

ALTER TABLE public.report_service_teams ENABLE ROW LEVEL SECURITY;
CREATE POLICY report_service_teams_manage_admins ON public.report_service_teams TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = report_service_teams.admin_id AND (a.owner_id = auth.uid() OR EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid() AND tm.role = ANY (ARRAY['owner'::public.team_member_role, 'admin'::public.team_member_role])))))));
CREATE POLICY report_service_teams_postgres_all ON public.report_service_teams TO postgres USING (true) WITH CHECK (true);
CREATE POLICY report_service_teams_select_members ON public.report_service_teams TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = report_service_teams.admin_id AND EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid())))));

ALTER TABLE public.template_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY template_items_manage_admins ON public.template_items TO authenticated USING (EXISTS ( SELECT 1
   FROM public.templates t
   JOIN public.admin a ON t.admin_id = a.id
  WHERE (t.id = template_items.template_id AND (a.owner_id = auth.uid() OR EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid() AND tm.role = ANY (ARRAY['owner'::public.team_member_role, 'admin'::public.team_member_role])))))));
CREATE POLICY template_items_postgres_all ON public.template_items TO postgres USING (true) WITH CHECK (true);
CREATE POLICY template_items_select_members ON public.template_items TO authenticated USING (EXISTS ( SELECT 1
   FROM public.templates t
   JOIN public.admin a ON t.admin_id = a.id
  WHERE (t.id = template_items.template_id AND EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid())))));

ALTER TABLE public.properties ENABLE ROW LEVEL SECURITY;
CREATE POLICY properties_manage_admins ON public.properties TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = properties.admin_id AND (a.owner_id = auth.uid() OR EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid() AND tm.role = ANY (ARRAY['owner'::public.team_member_role, 'admin'::public.team_member_role])))))));
CREATE POLICY properties_postgres_all ON public.properties TO postgres USING (true) WITH CHECK (true);
CREATE POLICY properties_select_members ON public.properties TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = properties.admin_id AND EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid())))));

ALTER TABLE public.template_categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY template_categories_manage_admins ON public.template_categories TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = template_categories.admin_id AND (a.owner_id = auth.uid() OR EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid() AND tm.role = ANY (ARRAY['owner'::public.team_member_role, 'admin'::public.team_member_role])))))));
CREATE POLICY template_categories_postgres_all ON public.template_categories TO postgres USING (true) WITH CHECK (true);
CREATE POLICY template_categories_select_members ON public.template_categories TO authenticated USING (EXISTS ( SELECT 1
   FROM public.admin a
  WHERE (a.id = template_categories.admin_id AND EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid())))));

ALTER TABLE public.property_checklists ENABLE ROW LEVEL SECURITY;
CREATE POLICY property_checklists_manage_admins ON public.property_checklists TO authenticated USING (EXISTS ( SELECT 1
   FROM public.properties p
   JOIN public.admin a ON p.admin_id = a.id
  WHERE (p.id = property_checklists.property_id AND (a.owner_id = auth.uid() OR EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid() AND tm.role = ANY (ARRAY['owner'::public.team_member_role, 'admin'::public.team_member_role])))))));
CREATE POLICY property_checklists_postgres_all ON public.property_checklists TO postgres USING (true) WITH CHECK (true);
CREATE POLICY property_checklists_select_members ON public.property_checklists TO authenticated USING (EXISTS ( SELECT 1
   FROM public.properties p
   JOIN public.admin a ON p.admin_id = a.id
  WHERE (p.id = property_checklists.property_id AND EXISTS ( SELECT 1
           FROM public.team_members tm
          WHERE (tm.admin_id = a.id AND tm.profile_id = auth.uid())))));

ALTER TABLE public.property_checklist_templates ENABLE ROW LEVEL SECURITY;
CREATE POLICY property_checklist_templates_access_for_members ON public.property_checklist_templates TO authenticated USING (EXISTS ( SELECT 1
   FROM public.property_checklists pc
   JOIN public.properties p ON pc.property_id = p.id
   JOIN public.team_members tm ON tm.admin_id = p.admin_id
  WHERE (pc.id = property_checklist_templates.property_checklist_id AND tm.profile_id = auth.uid())
));
CREATE POLICY property_checklist_templates_postgres_all ON public.property_checklist_templates TO postgres USING (true) WITH CHECK (true);

ALTER TABLE public.inspections ENABLE ROW LEVEL SECURITY;
CREATE POLICY inspections_access_for_members ON public.inspections TO authenticated USING (EXISTS ( SELECT 1
   FROM public.properties p
   JOIN public.admin a ON p.admin_id = a.id
   JOIN public.team_members tm ON tm.admin_id = a.id
  WHERE (p.id = inspections.property_id AND tm.profile_id = auth.uid())
));
CREATE POLICY inspections_postgres_all ON public.inspections TO postgres USING (true) WITH CHECK (true);

ALTER TABLE public.stripe_subscriptions ENABLE ROW LEVEL SECURITY;
CREATE POLICY stripe_subscriptions_postgres_all ON public.stripe_subscriptions TO postgres USING (true);

ALTER TABLE public.stripe_orders ENABLE ROW LEVEL SECURITY;
CREATE POLICY stripe_orders_postgres_all ON public.stripe_orders TO postgres USING (true);

ALTER TABLE public.inspection_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY inspection_items_access_for_members ON public.inspection_items TO authenticated USING (EXISTS ( SELECT 1
   FROM public.inspections i
   JOIN public.properties p ON i.property_id = p.id
   JOIN public.admin a ON p.admin_id = a.id
   JOIN public.team_members tm ON tm.admin_id = a.id
  WHERE (i.id = inspection_items.inspection_id AND tm.profile_id = auth.uid())
));
CREATE POLICY inspection_items_postgres_all ON public.inspection_items TO postgres USING (true);

ALTER TABLE public.stripe_customers ENABLE ROW LEVEL SECURITY;
CREATE POLICY stripe_customers_postgres_all ON public.stripe_customers TO postgres USING (true);

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY profiles_insert_own ON public.profiles TO authenticated FOR INSERT WITH CHECK ((auth.uid() = id));
CREATE POLICY profiles_postgres_all ON public.profiles TO postgres USING (true) WITH CHECK (true);
CREATE POLICY profiles_select_own ON public.profiles TO authenticated USING ((auth.uid() = id));
CREATE POLICY profiles_update_own ON public.profiles TO authenticated FOR UPDATE USING ((auth.uid() = id)) WITH CHECK ((auth.uid() = id));

ALTER TABLE public.admin ENABLE ROW LEVEL SECURITY;
CREATE POLICY admin_owner_full_access ON public.admin TO authenticated USING ((owner_id = auth.uid()));
CREATE POLICY admin_postgres_access ON public.admin TO postgres USING (true) WITH CHECK (true);

ALTER TABLE public.team_members ENABLE ROW LEVEL SECURITY;
CREATE POLICY team_members_admin_manage ON public.team_members TO authenticated USING ((admin_id IN ( SELECT admin.id
   FROM public.admin
  WHERE (admin.owner_id = auth.uid()))));
CREATE POLICY team_members_own_record ON public.team_members TO authenticated USING ((profile_id = auth.uid()));
CREATE POLICY team_members_postgres_access ON public.team_members TO postgres USING (true) WITH CHECK (true);

ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
CREATE POLICY reports_access_for_members ON public.reports
  FOR ALL
  TO authenticated
  USING (EXISTS ( SELECT 1
           FROM public.inspections i
           JOIN public.properties p ON i.property_id = p.id
           JOIN public.admin a ON p.admin_id = a.id
           JOIN public.team_members tm ON tm.admin_id = a.id
          WHERE (i.id = reports.inspection_id AND tm.profile_id = auth.uid())
        ));

-- Add triggers
CREATE TRIGGER update_templates_updated_at BEFORE UPDATE ON public.templates FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_report_service_teams_updated_at BEFORE UPDATE ON public.report_service_teams FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_template_items_updated_at BEFORE UPDATE ON public.template_items FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_properties_updated_at BEFORE UPDATE ON public.properties FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_template_categories_updated_at BEFORE UPDATE ON public.template_categories FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_property_checklists_updated_at BEFORE UPDATE ON public.property_checklists FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_property_checklist_templates_updated_at BEFORE UPDATE ON public.property_checklist_templates FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_inspections_updated_at BEFORE UPDATE ON public.inspections FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_inspection_items_updated_at BEFORE UPDATE ON public.inspection_items FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_reports_updated_at BEFORE UPDATE ON public.reports FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- Create auth triggers
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

CREATE TRIGGER on_auth_user_verified
  AFTER UPDATE OF email_confirmed_at ON auth.users
  FOR EACH ROW
  WHEN (OLD.email_confirmed_at IS NULL AND NEW.email_confirmed_at IS NOT NULL)
  EXECUTE FUNCTION public.handle_email_verification();

CREATE TRIGGER on_auth_user_updated
  AFTER UPDATE ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_auth_user_changes();
